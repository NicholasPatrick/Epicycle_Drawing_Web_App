https://editor.p5js.org/3nicholaspatrick3/sketches/J18lallHr
/*
Instructions:
1. click to draw points. more points --> more precision but your computer will need to work harder
2. press d when you're done.

Things you can do while plotting points:
- e: print the coordinates of the drawing
- d: start drawing
- space: deletes the point on top of the stack
- c: cycle the points (point on the bottom of the stack moves to the top)
- v: cycle the points (point on the top of the stack moves to the bottom)
- press p, then o, then i: delete all points (the complicated key presses is to prevent accidental deletion)

Things you can do while epicycles are working:
- e: print the coordinates of the drawing
- r: stop drawing and continue editing the points
- space: pauses the drawing
- a: increase the number of epicycles (by 2) and restart the drawing
- s: decrease the number of epicycles (by 2) and restart the drawing
- b: toggles the blue circles
- g: toggles the green lines
- f: toggles the white trace

Not implemented:
- q: speeds up the drawing
- w: slows down the drawing
- v: reverse

After you're done with that:
click to toggle the 3 elements of the drawing: blue stuff & segments stuff, white curve, and your points
press space to pause (you probably have to click on the canvas before you can pause).

A few things to point out:
- After the first loop it completes, it doesn't plot more points to be drawn in blue, so don't worry too much about letting it run for too long.
- Feel free to change frameRate(30), Δ (plotted points = τ/Δ), and n (the number of circles used is 2*n+1)
- Segment Division is just the precision of the numerical integration. Keeping it at 300 should be fine.
- To save the set of points, just press e. The coordinates will be printed.
- If you refresh/stop/restart, whatever drawing you had will be lost.
*/

//we want the curve to hit every point in the array points
let n = 1000,
  Δ = 0.002,
  frame_rate = 30;
let points = [
  [740, 122], 
  [742, 139], 
  [737, 167], 
  [732, 194], 
  [722, 226], 
  [714, 248], 
  [701, 266], 
  [683, 281], 
  [665, 293], 
  [650, 302], 
  [637, 312], 
  [626, 332], 
  [608, 346], 
  [595, 359], 
  [587, 367], 
  [580, 372], 
  [581, 383], 
  [597, 395], 
  [605, 404], 
  [612, 424], 
  [615, 443], 
  [614, 458], 
  [606, 466], 
  [608, 456], 
  [609, 434], 
  [605, 420], 
  [596, 411], 
  [601, 429], 
  [601, 445], 
  [595, 457], 
  [591, 458], 
  [592, 450], 
  [596, 436], 
  [597, 424], 
  [590, 404], 
  [582, 390], 
  [589, 415], 
  [590, 433], 
  [586, 445], 
  [576, 447], 
  [583, 432], 
  [583, 414], 
  [579, 396], 
  [571, 387], 
  [574, 405], 
  [577, 419], 
  [563, 440], 
  [566, 431], 
  [567, 420], 
  [567, 403], 
  [563, 388], 
  [559, 379], 
  [559, 391], 
  [560, 405], 
  [560, 417], 
  [556, 428], 
  [552, 432], 
  [553, 419], 
  [554, 402], 
  [550, 387], 
  [546, 375], 
  [533, 360], 
  [511, 349], 
  [530, 364], 
  [538, 376], 
  [542, 398], 
  [536, 420], 
  [535, 394], 
  [520, 361], 
  [503, 347], 
  [487, 342], 
  [514, 359], 
  [522, 372], 
  [525, 396], 
  [520, 412], 
  [517, 380], 
  [510, 364], 
  [484, 349], 
  [465, 348], 
  [443, 356], 
  [472, 358], 
  [493, 361], 
  [499, 373], 
  [502, 386], 
  [500, 395], 
  [489, 380], 
  [467, 366], 
  [439, 364], 
  [427, 366], 
  [420, 374], 
  [416, 388], 
  [417, 404], 
  [419, 424], 
  [426, 442], 
  [428, 455], 
  [424, 473], 
  [416, 482], 
  [409, 493], 
  [404, 507], 
  [398, 523], 
  [388, 526], 
  [378, 529], 
  [370, 530], 
  [370, 530], 
  [358, 530], 
  [350, 527], 
  [343, 524], 
  [336, 522], 
  [331, 518], 
  [329, 514], 
  [333, 513], 
  [335, 518], 
  [337, 514], 
  [338, 522], 
  [339, 517], 
  [343, 516], 
  [344, 521], 
  [343, 522], 
  [345, 517], 
  [348, 517], 
  [351, 520], 
  [349, 526], 
  [346, 526], 
  [350, 519], 
  [353, 520], 
  [356, 526], 
  [354, 527], 
  [349, 525], 
  [351, 522], 
  [354, 521], 
  [358, 522], 
  [360, 527], 
  [355, 529], 
  [352, 525], 
  [355, 523], 
  [362, 522], 
  [359, 514], 
  [364, 514], 
  [367, 514], 
  [371, 513], 
  [375, 512], 
  [379, 510], 
  [382, 508], 
  [386, 507], 
  [391, 506], 
  [396, 508], 
  [392, 505], 
  [388, 504], 
  [383, 505], 
  [377, 507], 
  [374, 508], 
  [370, 510], 
  [367, 511], 
  [363, 508], 
  [360, 505], 
  [359, 500], 
  [361, 497], 
  [364, 495], 
  [368, 497], 
  [370, 501], 
  [369, 505], 
  [367, 506], 
  [362, 505], 
  [360, 503], 
  [360, 501], 
  [363, 499], 
  [365, 498], 
  [368, 498], 
  [367, 501], 
  [365, 501], 
  [364, 500], 
  [365, 499], 
  [366, 501], 
  [366, 505], 
  [365, 508], 
  [363, 510], 
  [360, 510], 
  [356, 508], 
  [353, 504], 
  [352, 500], 
  [351, 496], 
  [350, 494], 
  [355, 493], 
  [354, 496], 
  [352, 498], 
  [350, 501], 
  [350, 506], 
  [353, 509], 
  [356, 512], 
  [361, 513], 
  [361, 512], 
  [357, 510], 
  [354, 508], 
  [351, 505], 
  [349, 502], 
  [349, 498], 
  [350, 495], 
  [355, 493], 
  [359, 494], 
  [363, 493], 
  [368, 492], 
  [371, 493], 
  [374, 494], 
  [377, 495], 
  [380, 497], 
  [383, 498], 
  [387, 500], 
  [390, 501], 
  [393, 503], 
  [388, 504], 
  [383, 506], 
  [377, 507], 
  [372, 509], 
  [368, 511], 
  [366, 512], 
  [366, 526], 
  [365, 529], 
  [359, 529], 
  [360, 525], 
  [366, 524], 
  [370, 528], 
  [368, 529], 
  [364, 528], 
  [366, 525], 
  [372, 523], 
  [378, 525], 
  [375, 529], 
  [370, 528], 
  [376, 524], 
  [380, 524], 
  [382, 528], 
  [374, 528], 
  [377, 524], 
  [385, 522], 
  [389, 522], 
  [387, 524], 
  [383, 525], 
  [384, 522], 
  [392, 521], 
  [398, 523], 
  [392, 523], 
  [397, 519], 
  [399, 518], 
  [402, 518], 
  [400, 520], 
  [399, 518], 
  [403, 516], 
  [405, 514], 
  [402, 522], 
  [396, 535], 
  [395, 554], 
  [394, 567], 
  [388, 578], 
  [375, 591], 
  [360, 598], 
  [359, 606], 
  [365, 605], 
  [375, 602], 
  [386, 600], 
  [395, 595], 
  [400, 586], 
  [401, 577], 
  [401, 563], 
  [401, 552], 
  [401, 539], 
  [402, 523], 
  [402, 535], 
  [402, 547], 
  [403, 561], 
  [402, 571], 
  [402, 580], 
  [399, 590], 
  [393, 596], 
  [380, 602], 
  [367, 605], 
  [358, 607], 
  [361, 612], 
  [375, 613], 
  [385, 614], 
  [392, 611], 
  [400, 606], 
  [405, 597], 
  [408, 587], 
  [409, 569], 
  [408, 558], 
  [408, 548], 
  [409, 535], 
  [412, 522], 
  [416, 510], 
  [422, 501], 
  [428, 494], 
  [435, 485], 
  [442, 478], 
  [444, 464], 
  [443, 455], 
  [437, 444], 
  [431, 429], 
  [428, 416], 
  [425, 407], 
  [425, 399], 
  [425, 390], 
  [431, 380], 
  [441, 376], 
  [453, 377], 
  [458, 380], 
  [447, 384], 
  [440, 388], 
  [438, 397], 
  [438, 408], 
  [442, 422], 
  [444, 442], 
  [445, 463], 
  [445, 475], 
  [440, 491], 
  [435, 504], 
  [427, 517], 
  [421, 527], 
  [417, 539], 
  [416, 547], 
  [416, 559], 
  [415, 579], 
  [414, 595], 
  [412, 609], 
  [411, 617], 
  [407, 621], 
  [397, 622], 
  [385, 620], 
  [377, 618], 
  [371, 618], 
  [363, 616], 
  [369, 626], 
  [380, 628], 
  [393, 632], 
  [404, 633], 
  [418, 630], 
  [424, 625], 
  [426, 618], 
  [426, 609], 
  [424, 601], 
  [425, 588], 
  [425, 573], 
  [425, 567], 
  [426, 560], 
  [428, 550], 
  [430, 540], 
  [433, 533], 
  [438, 527], 
  [443, 518], 
  [448, 511], 
  [451, 503], 
  [454, 490], 
  [455, 478], 
  [454, 465], 
  [453, 455], 
  [451, 442], 
  [449, 427], 
  [450, 414], 
  [453, 399], 
  [462, 389], 
  [475, 389], 
  [483, 391], 
  [478, 396], 
  [473, 404], 
  [470, 414], 
  [467, 425], 
  [468, 439], 
  [469, 452], 
  [469, 470], 
  [468, 490], 
  [468, 502], 
  [465, 514], 
  [461, 533], 
  [455, 546], 
  [449, 560], 
  [445, 574], 
  [442, 593], 
  [440, 604], 
  [439, 616], 
  [435, 627], 
  [430, 637], 
  [423, 639], 
  [413, 641], 
  [404, 641], 
  [397, 640], 
  [386, 638], 
  [378, 637], 
  [382, 644], 
  [387, 647], 
  [395, 649], 
  [405, 648], 
  [421, 648], 
  [435, 644], 
  [442, 638], 
  [446, 629], 
  [450, 619], 
  [453, 609], 
  [453, 609], 
  [455, 598], 
  [458, 587], 
  [460, 576], 
  [464, 567], 
  [467, 554], 
  [469, 544], 
  [471, 529], 
  [474, 514], 
  [477, 497], 
  [478, 485], 
  [480, 470], 
  [480, 456], 
  [481, 442], 
  [483, 426], 
  [486, 414], 
  [489, 405], 
  [493, 400], 
  [499, 397], 
  [505, 401], 
  [508, 407], 
  [502, 414], 
  [498, 426], 
  [495, 443], 
  [493, 458], 
  [491, 480], 
  [489, 496], 
  [486, 513], 
  [483, 539], 
  [479, 561], 
  [474, 581], 
  [467, 602], 
  [459, 621], 
  [455, 637], 
  [447, 647], 
  [433, 654], 
  [423, 656], 
  [413, 657], 
  [403, 657], 
  [415, 667], 
  [430, 664], 
  [443, 661], 
  [458, 651], 
  [465, 634], 
  [472, 617], 
  [477, 602], 
  [483, 584], 
  [489, 564], 
  [493, 539], 
  [500, 511], 
  [504, 494], 
  [508, 474], 
  [510, 457], 
  [514, 442], 
  [518, 427], 
  [522, 423], 
  [532, 419], 
  [540, 421], 
  [530, 437], 
  [527, 458], 
  [525, 474], 
  [519, 494], 
  [512, 518], 
  [505, 547], 
  [501, 570], 
  [493, 593], 
  [484, 618], 
  [476, 634], 
  [471, 649], 
  [463, 659], 
  [470, 657], 
  [479, 648], 
  [485, 640], 
  [495, 622], 
  [503, 598], 
  [508, 580], 
  [517, 550], 
  [525, 517], 
  [533, 483], 
  [538, 460], 
  [544, 444], 
  [554, 446], 
  [551, 467], 
  [542, 499], 
  [531, 543], 
  [522, 577], 
  [512, 605], 
  [505, 624], 
  [486, 652], 
  [471, 660], 
  [459, 662], 
  [477, 661], 
  [490, 654], 
  [506, 643], 
  [520, 622], 
  [526, 610], 
  [533, 585], 
  [538, 566], 
  [543, 535], 
  [547, 511], 
  [557, 477], 
  [563, 463], 
  [577, 462], 
  [561, 504], 
  [552, 544], 
  [543, 572], 
  [524, 614], 
  [536, 599], 
  [547, 576], 
  [561, 540], 
  [566, 507], 
  [575, 473], 
  [590, 473], 
  [582, 491], 
  [578, 506], 
  [574, 518], 
  [572, 532], 
  [567, 552], 
  [560, 575], 
  [548, 596], 
  [542, 612], 
  [534, 627], 
  [518, 643], 
  [504, 654], 
  [486, 665], 
  [475, 671], 
  [452, 677], 
  [434, 679], 
  [423, 672], 
  [413, 666], 
  [406, 660], 
  [395, 651], 
  [384, 640], 
  [374, 632], 
  [367, 623], 
  [362, 613], 
  [356, 605], 
  [351, 599], 
  [342, 597], 
  [332, 597], 
  [320, 595], 
  [312, 593], 
  [305, 590], 
  [299, 584], 
  [294, 571], 
  [292, 551], 
  [292, 536], 
  [292, 523], 
  [292, 518], 
  [296, 520], 
  [294, 521], 
  [293, 518], 
  [295, 516], 
  [299, 516], 
  [299, 518], 
  [297, 518], 
  [300, 514], 
  [302, 513], 
  [304, 514], 
  [303, 516], 
  [302, 515], 
  [302, 514], 
  [310, 512], 
  [307, 514], 
  [306, 512], 
  [311, 509], 
  [312, 508], 
  [312, 510], 
  [313, 509], 
  [314, 499], 
  [309, 493], 
  [306, 493], 
  [301, 493], 
  [299, 501], 
  [300, 504], 
  [301, 504], 
  [303, 503], 
  [304, 501], 
  [299, 500], 
  [297, 501], 
  [293, 506], 
  [290, 515], 
  [300, 494], 
  [303, 472], 
  [300, 460], 
  [304, 470], 
  [309, 482], 
  [312, 491], 
  [314, 500], 
  [313, 490], 
  [310, 480], 
  [305, 471], 
  [302, 464], 
  [298, 456], 
  [300, 447], 
  [306, 443], 
  [311, 444], 
  [322, 445], 
  [330, 443], 
  [340, 443], 
  [342, 449], 
  [343, 456], 
  [338, 461], 
  [330, 462], 
  [340, 460], 
  [344, 456], 
  [345, 449], 
  [343, 443], 
  [340, 441], 
  [335, 440], 
  [328, 440], 
  [321, 444], 
  [315, 444], 
  [308, 442], 
  [306, 444], 
  [309, 436], 
  [311, 427], 
  [310, 424], 
  [315, 416], 
  [316, 419], 
  [319, 421], 
  [324, 423], 
  [327, 422], 
  [332, 419], 
  [337, 416], 
  [344, 414], 
  [347, 412], 
  [352, 411], 
  [356, 411], 
  [359, 408], 
  [362, 406], 
  [363, 405], 
  [359, 408], 
  [357, 410], 
  [354, 406], 
  [350, 405], 
  [346, 403], 
  [342, 401], 
  [339, 399], 
  [335, 398], 
  [332, 398], 
  [329, 398], 
  [326, 399], 
  [323, 401], 
  [321, 404], 
  [320, 407], 
  [322, 409], 
  [326, 412], 
  [332, 412], 
  [339, 411], 
  [345, 409], 
  [352, 409], 
  [355, 409], 
  [345, 410], 
  [341, 411], 
  [334, 411], 
  [329, 412], 
  [327, 412], 
  [324, 410], 
  [321, 409], 
  [320, 410], 
  [318, 410], 
  [315, 413], 
  [315, 415], 
  [317, 413], 
  [319, 410], 
  [321, 406], 
  [322, 403], 
  [326, 398], 
  [328, 393], 
  [329, 389], 
  [331, 385], 
  [333, 379], 
  [335, 376], 
  [340, 370], 
  [347, 367], 
  [357, 366], 
  [365, 367], 
  [371, 368], 
  [380, 370], 
  [387, 372], 
  [397, 376], 
  [408, 379], 
  [415, 382], 
  [419, 383], 
  [411, 380], 
  [397, 376], 
  [389, 368], 
  [383, 363], 
  [376, 359], 
  [372, 355], 
  [375, 361], 
  [375, 366], 
  [377, 368], 
  [371, 362], 
  [367, 358], 
  [360, 352], 
  [353, 346], 
  [356, 352], 
  [358, 359], 
  [357, 363], 
  [354, 362], 
  [350, 355], 
  [346, 351], 
  [342, 347], 
  [337, 344], 
  [330, 342], 
  [337, 351], 
  [342, 358], 
  [344, 364], 
  [344, 367], 
  [335, 354], 
  [330, 348], 
  [322, 344], 
  [317, 342], 
  [309, 341], 
  [307, 340], 
  [318, 346], 
  [327, 356], 
  [332, 365], 
  [334, 371], 
  [335, 376], 
  [328, 362], 
  [319, 353], 
  [311, 348], 
  [298, 343], 
  [289, 342], 
  [281, 342], 
  [272, 341], 
  [269, 341], 
  [262, 343], 
  [258, 347], 
  [259, 349], 
  [266, 347], 
  [277, 348], 
  [291, 351], 
  [302, 355], 
  [312, 363], 
  [317, 369], 
  [322, 377], 
  [324, 387], 
  [325, 389], 
  [321, 397], 
  [316, 386], 
  [312, 377], 
  [304, 371], 
  [295, 366], 
  [283, 361], 
  [272, 360], 
  [264, 360], 
  [259, 361], 
  [259, 364], 
  [284, 371], 
  [293, 374], 
  [301, 383], 
  [306, 393], 
  [310, 407], 
  [310, 417], 
  [310, 423], 
  [305, 407], 
  [303, 399], 
  [299, 392], 
  [293, 401], 
  [288, 407], 
  [284, 411], 
  [282, 420], 
  [282, 429], 
  [281, 438], 
  [279, 444], 
  [273, 453], 
  [269, 457], 
  [260, 466], 
  [256, 481], 
  [258, 498], 
  [263, 507], 
  [261, 501], 
  [261, 483], 
  [265, 470], 
  [265, 470], 
  [269, 464], 
  [279, 447], 
  [284, 438], 
  [284, 424], 
  [287, 414], 
  [292, 407], 
  [299, 406], 
  [295, 413], 
  [291, 423], 
  [290, 435], 
  [288, 443], 
  [281, 459], 
  [277, 469], 
  [273, 479], 
  [273, 488], 
  [272, 500], 
  [272, 507], 
  [271, 516], 
  [276, 500], 
  [277, 487], 
  [280, 476], 
  [285, 462], 
  [289, 451], 
  [295, 440], 
  [297, 427], 
  [299, 419], 
  [306, 412], 
  [303, 425], 
  [302, 437], 
  [299, 444], 
  [295, 457], 
  [294, 467], 
  [291, 484], 
  [287, 498], 
  [282, 511], 
  [283, 522], 
  [283, 532], 
  [270, 516], 
  [264, 507], 
  [255, 499], 
  [254, 512], 
  [260, 519], 
  [267, 526], 
  [278, 543], 
  [277, 554], 
  [275, 569], 
  [273, 575], 
  [273, 565], 
  [271, 555], 
  [267, 544], 
  [262, 535], 
  [257, 528], 
  [255, 517], 
  [250, 501], 
  [248, 493], 
  [258, 499], 
  [263, 508], 
  [276, 522], 
  [282, 535], 
  [286, 546], 
  [286, 556], 
  [287, 564], 
  [284, 574], 
  [282, 582], 
  [279, 591], 
  [277, 601], 
  [283, 608], 
  [287, 612], 
  [297, 611], 
  [302, 609], 
  [311, 606], 
  [318, 602], 
  [325, 597], 
  [323, 596], 
  [312, 598], 
  [308, 604], 
  [309, 604], 
  [318, 601], 
  [322, 598], 
  [327, 597], 
  [326, 600], 
  [320, 606], 
  [316, 610], 
  [311, 612], 
  [301, 616], 
  [293, 618], 
  [289, 618], 
  [289, 621], 
  [297, 623], 
  [310, 623], 
  [315, 620], 
  [326, 615], 
  [330, 610], 
  [336, 604], 
  [337, 601], 
  [347, 599], 
  [344, 606], 
  [337, 616], 
  [329, 622], 
  [322, 625], 
  [315, 626], 
  [307, 626], 
  [293, 624], 
  [285, 617], 
  [303, 631], 
  [313, 635], 
  [320, 635], 
  [330, 633], 
  [339, 628], 
  [347, 618], 
  [352, 607], 
  [356, 603], 
  [359, 612], 
  [352, 625], 
  [346, 631], 
  [338, 638], 
  [333, 640], 
  [321, 640], 
  [307, 640], 
  [309, 643], 
  [321, 646], 
  [329, 647], 
  [335, 646], 
  [344, 643], 
  [350, 640], 
  [358, 632], 
  [362, 628], 
  [364, 624], 
  [367, 621], 
  [369, 627], 
  [361, 637], 
  [356, 645], 
  [347, 650], 
  [336, 652], 
  [330, 652], 
  [325, 652], 
  [335, 658], 
  [351, 656], 
  [359, 655], 
  [365, 648], 
  [369, 641], 
  [374, 636], 
  [379, 641], 
  [374, 651], 
  [367, 658], 
  [360, 662], 
  [353, 663], 
  [352, 663], 
  [363, 667], 
  [370, 668], 
  [379, 662], 
  [382, 656], 
  [387, 649], 
  [389, 647], 
  [396, 653], 
  [390, 662], 
  [383, 668], 
  [377, 671], 
  [375, 672], 
  [382, 673], 
  [385, 673], 
  [394, 670], 
  [397, 668], 
  [403, 661], 
  [404, 659], 
  [408, 664], 
  [404, 669], 
  [399, 672], 
  [396, 676], 
  [395, 677], 
  [400, 676], 
  [407, 674], 
  [416, 670], 
  [417, 668], 
  [418, 671], 
  [416, 677], 
  [414, 678], 
  [418, 677], 
  [422, 676], 
  [432, 679], 
  [410, 680], 
  [391, 678], 
  [376, 675], 
  [359, 667], 
  [342, 660], 
  [329, 654], 
  [322, 650], 
  [307, 641], 
  [293, 630], 
  [285, 619], 
  [277, 608], 
  [274, 599], 
  [272, 586], 
  [271, 576], 
  [269, 565], 
  [266, 554], 
  [261, 541], 
  [258, 530], 
  [254, 516], 
  [251, 505], 
  [251, 494], 
  [248, 488], 
  [249, 470], 
  [256, 452], 
  [266, 446], 
  [276, 436], 
  [275, 425], 
  [276, 414], 
  [279, 406], 
  [285, 402], 
  [295, 386], 
  [288, 378], 
  [276, 370], 
  [265, 367], 
  [255, 350], 
  [260, 341], 
  [271, 338], 
  [276, 331], 
  [290, 330], 
  [303, 337], 
  [317, 337], 
  [330, 340], 
  [340, 341], 
  [350, 344], 
  [363, 350], 
  [370, 354], 
  [384, 359], 
  [396, 367], 
  [395, 374], 
  [396, 356], 
  [395, 346], 
  [394, 333], 
  [395, 324], 
  [408, 320], 
  [424, 316], 
  [438, 314], 
  [454, 314], 
  [474, 314], 
  [487, 315], 
  [501, 314], 
  [514, 315], 
  [527, 315], 
  [537, 327], 
  [546, 336], 
  [555, 347], 
  [563, 356], 
  [569, 362], 
  [574, 367], 
  [563, 357], 
  [555, 349], 
  [551, 341], 
  [545, 335], 
  [541, 331], 
  [535, 324], 
  [529, 315], 
  [520, 315], 
  [507, 315], 
  [495, 314], 
  [483, 314], 
  [473, 314], 
  [459, 314], 
  [447, 314], 
  [432, 314], 
  [418, 317], 
  [403, 321], 
  [395, 324], 
  [386, 325], 
  [375, 323], 
  [367, 315], 
  [356, 304], 
  [351, 297], 
  [342, 288], 
  [335, 279], 
  [326, 272], 
  [317, 265], 
  [308, 261], 
  [310, 258], 
  [317, 262], 
  [328, 268], 
  [338, 274], 
  [347, 283], 
  [355, 290], 
  [364, 298], 
  [374, 312], 
  [382, 319], 
  [390, 327], 
  [390, 332], 
  [388, 336], 
  [386, 342], 
  [384, 351], 
  [383, 358], 
  [369, 351], 
  [363, 348], 
  [349, 342], 
  [338, 332], 
  [334, 329], 
  [334, 325], 
  [329, 319], 
  [325, 309], 
  [320, 301], 
  [317, 294], 
  [313, 285], 
  [309, 276], 
  [306, 267], 
  [306, 258], 
  [311, 257], 
  [309, 260], 
  [307, 265], 
  [310, 272], 
  [314, 283], 
  [319, 293], 
  [325, 302], 
  [330, 314], 
  [336, 325], 
  [340, 331], 
  [321, 325], 
  [310, 325], 
  [303, 323], 
  [295, 320], 
  [285, 316], 
  [275, 310], 
  [263, 302], 
  [254, 290], 
  [248, 278], 
  [238, 268], 
  [230, 257], 
  [222, 244], 
  [216, 236], 
  [207, 221], 
  [201, 205], 
  [194, 194], 
  [189, 183], 
  [182, 172], 
  [177, 162], 
  [169, 154], 
  [162, 140], 
  [156, 131], 
  [153, 127], 
  [156, 125], 
  [161, 125], 
  [167, 125], 
  [183, 126], 
  [271, 125], 
  [277, 126], 
  [281, 143], 
  [282, 159], 
  [283, 179], 
  [287, 204], 
  [286, 223], 
  [293, 243], 
  [307, 255], 
  [294, 245], 
  [288, 236], 
  [283, 223], 
  [276, 209], 
  [273, 192], 
  [273, 170], 
  [282, 152], 
  [273, 168], 
  [266, 185], 
  [260, 195], 
  [254, 201], 
  [250, 192], 
  [264, 179], 
  [272, 167], 
  [278, 154], 
  [280, 148], 
  [275, 148], 
  [262, 152], 
  [258, 155], 
  [247, 162], 
  [239, 165], 
  [236, 163], 
  [227, 166], 
  [221, 167], 
  [241, 153], 
  [259, 144], 
  [272, 136], 
  [274, 130], 
  [259, 139], 
  [251, 141], 
  [241, 141], 
  [220, 146], 
  [205, 149], 
  [196, 151], 
  [207, 147], 
  [224, 141], 
  [238, 139], 
  [252, 135], 
  [255, 134], 
  [236, 133], 
  [214, 130], 
  [213, 129], 
  [226, 128], 
  [251, 132], 
  [259, 133], 
  [278, 131], 
  [270, 133], 
  [266, 125], 
  [276, 123], 
  [281, 124], 
  [291, 124], 
  [300, 125], 
  [359, 126], 
  [417, 125], 
  [476, 125], 
  [523, 122], 
  [529, 123], 
  [531, 124], 
  [532, 128], 
  [540, 145], 
  [551, 164], 
  [559, 177], 
  [569, 193], 
  [577, 210], 
  [584, 220], 
  [592, 232], 
  [598, 240], 
  [600, 250], 
  [606, 260], 
  [611, 271], 
  [618, 282], 
  [622, 290], 
  [629, 298], 
  [636, 304], 
  [642, 306], 
  [632, 299], 
  [628, 295], 
  [621, 285], 
  [613, 273], 
  [606, 258], 
  [601, 246], 
  [596, 237], 
  [582, 244], 
  [571, 252], 
  [564, 265], 
  [556, 277], 
  [546, 289], 
  [540, 298], 
  [536, 307], 
  [530, 313], 
  [530, 315], 
  [534, 308], 
  [536, 304], 
  [545, 291], 
  [553, 281], 
  [560, 269], 
  [568, 258], 
  [574, 250], 
  [576, 243], 
  [580, 233], 
  [585, 224], 
  [589, 217], 
  [595, 207], 
  [599, 200], 
  [604, 188], 
  [609, 174], 
  [611, 167], 
  [613, 160], 
  [616, 150], 
  [618, 144], 
  [615, 141], 
  [613, 133], 
  [611, 126], 
  [598, 124], 
  [536, 125], 
  [515, 124], 
  [563, 124], 
  [596, 122], 
  [618, 122], 
  [622, 123], 
  [632, 139], 
  [648, 149], 
  [654, 150], 
  [642, 136], 
  [635, 124], 
  [632, 118], 
  [634, 129], 
  [647, 147], 
  [636, 132], 
  [625, 124], 
  [624, 123], 
  [635, 123], 
  [649, 121], 
  [657, 121], 
  [658, 121], 
  [675, 132], 
  [667, 131], 
  [652, 123], 
  [645, 120], 
  [652, 134], 
  [661, 139], 
  [644, 127], 
  [635, 124], 
  [647, 122], 
  [661, 122], 
  [683, 121], 
  [704, 122], 
  [729, 122]
];
let traced = [];
const τ = 6.283185307179586476925286766559;
//(a+bi) e^(n τ i)
//a, b
let epicycle = [];
let θ = 0.0;
let mode = 0;
/*
  0: picking points
  1: drawing
*/
function setup() {
  createCanvas(800, 800);
  frameRate(frame_rate);
  noLoop();
  for (let i = 0; i < 30; i++) {}
}
let target = true;
let circles = true;
let segments = true;
let trace = true;
let looping = true;
let zoom = false;
let deleteCounter = 0;

function mousePressed() {
  if (mode == 0) {
    points.push([mouseX, height - mouseY]);
    loop();
    draw();
    noLoop();
  }
}

function calculate() {
  while (epicycle.length > n * 2 + 1) {
    epicycle.pop();
  }
  while (epicycle.length < 2 * n + 1) {
    let c = epicycle.length % 2 == 1 ? (epicycle.length + 1) / 2 : -epicycle.length / 2;
    if (c == 0) {
      let xINT = 0,
        yINT = 0;
      for (let k = 0; k < points.length; k++) {
        xINT += points[k][0];
        yINT += points[k][1];
      }
      xINT /= points.length;
      yINT /= points.length;
      epicycle.push([xINT, yINT]);
    } else {
      let xINT = 0,
        yINT = 0;
      let sinf = 0,
        cosf = 1;
      let sint, cost;
      for (let k = 0; k < points.length; k++) {
        /*
          Finding integral from f=τ*k/points.length to t=τ*(k+1)/points.length of (ax+b)*cis(-cx) dx
          af+b=p (first point)
          at+b=q (second point)
        */
        let f = τ * k / points.length,
          t = τ * (k + 1) / points.length;
        let p = points[k],
          q = points[(k + 1) % points.length];
        let a = [(p[0] - q[0]) / (f - t), (p[1] - q[1]) / (f - t)];
        let b = [(q[0] * f - p[0] * t) / (f - t), (q[1] * f - p[1] * t) / (f - t)];
        // https://www.wolframalpha.com/input/?i=%28indefinite+integral+of+%28a%2Bbx%29*cis%28-cx%29+dx%29*c%5E2
        sint = sin(-c * t);
        cost = cos(-c * t);
        xINT -= a[0] * cosf - c * (b[0] + a[0] * f) * sinf;
        xINT += a[0] * cost - c * (b[0] + a[0] * t) * sint;
        yINT -= a[0] * sinf + c * (b[0] + a[0] * f) * cosf;
        yINT += a[0] * sint + c * (b[0] + a[0] * t) * cost;

        yINT -= a[1] * cosf - c * (b[1] + a[1] * f) * sinf;
        yINT += a[1] * cost - c * (b[1] + a[1] * t) * sint;
        xINT += a[1] * sinf + c * (b[1] + a[1] * f) * cosf;
        xINT -= a[1] * sint + c * (b[1] + a[1] * t) * cost;
        sinf = sint;
        cosf = cost;
      }
      xINT /= c * c * τ;
      yINT /= c * c * τ;
      epicycle.push([xINT, yINT]);
    }
  }
}

function keyPressed() {
  if (key == " ") {
    if (mode == 0) {
      if (points.length >= 1) {
        points.pop();
        loop();
        draw();
        noLoop();
      }
    } else if (mode == 1) {
      looping = !looping;
      if (looping) {
        loop();
      } else {
        noLoop();
      }
    }
  } else
  if (key == "e") {
    for (let i = 0; i < points.length; i++) {
      print("[" + points[i][0] + ", " + points[i][1] + "],");
    }
  } else
  if (key == "d") {
    if (mode == 0) {
      calculate();
      mode = 1;
      loop();
    }
  } else
  if (key == "r") {
    if (mode == 1) {
      mode = 0;
      traced = [];
      epicycle = [];
      θ = 0;
      loop();
    }
  } else
  if (key == "c") {
    if (mode == 0 && points.length > 0) {
      points.push(points.shift());
      loop();
      draw();
      noLoop();
    }
  } else
  if (key == "v") {
    if (mode == 0 && points.length > 0) {
      points.unshift(points.pop());
      loop();
      draw();
      noLoop();
    }
  } else
  if (key == "p") {
    deleteCounter = 1;
  } else
  if (key == "o") {
    if (deleteCounter == 1) {
      deleteCounter = 2;
    }
  } else
  if (key == "i") {
    if (mode == 0 && deleteCounter == 2) {
      points = [];
      loop();
      draw();
      noLoop();
      deleteCounter = 0;
    }
  } else
  if (key == "a") {
    if (mode == 1) {
      n++;
      calculate();
      θ = 0;
      traced = [];
    }
  } else
  if (key == "s") {
    if (n > 0) {
      if (mode == 1) {
        n--;
        calculate();
        θ = 0;
        traced = [];
      }
    }
  } else
  if (key == "f") {
    target = !target;
    if (mode == 0) {
      target = true;
    }
  } else
  if (key == "b") {
    circles = !circles;
    if (mode == 0) {
      circles = true;
    }
  } else
  if (key == "g") {
    segments = !segments;
    if (mode == 0) {
      segments = true;
    }
  } else
  if (key == "t") {
    trace = !trace;
    if (mode == 0) {
      trace = true;
    }
  } else
  if (key == "z") {
    zoom = !zoom;
  }
  if (key != "p" && deleteCounter == 1) {
    deleteCounter = 0;
  }
}

function draw() {
  background(0);
  if (mode == 0) {
    noStroke();
    translate(0, height);
    scale(1, -1);
    //target points
    for (let i = 0; i < points.length; i++) {
      colorMode(HSB);
      stroke(floor(i * 360 / points.length), 255, 255);
      if (i == 0) {
        strokeWeight(10);
      } else if (i == points.length - 1) {
        strokeWeight(12);
      } else {
        strokeWeight(8);
      }
      point(points[i][0], points[i][1]);
    }
    scale(1 / width, -1 / height);
    translate(0, -height);
  } else if (mode == 1) {
    translate(0, height);
    scale(1, -1);
    //target points
    if (target) {
      strokeWeight(8);
      for (let i = 0; i < points.length; i++) {
        colorMode(HSB);
        stroke(floor(i * 360 / points.length), 255, 255);
        point(points[i][0], points[i][1]);
      }
    }
    colorMode(RGB);
    //circles
    let x = 0.0,
      y = 0.0;
    strokeWeight(1);
    noFill();
    for (let i = 0, j = 0; i < epicycle.length; i++) {
      let a = epicycle[i][0],
        b = epicycle[i][1];
      if (circles) {
        let d = sqrt(a * a + b * b);
        stroke(90, 90, 255);
        ellipse(x, y, d * 2, d * 2);
      }
      let sinVal = sin(j * θ),
        cosVal = cos(j * θ);
      if (segments) {
        stroke(90, 255, 90);
        line(x, y, x + a * cosVal - b * sinVal, y + a * sinVal + b * cosVal);
      }
      x += a * cosVal - b * sinVal;
      y += a * sinVal + b * cosVal;
      j = (i % 2 == 0) - j;
    }
    if (θ < τ) {
      traced.push([x, y]);
    }
    θ += Δ;
    //trace
    if (trace) {
      stroke(255);
      strokeWeight(2);
      for (let i = 0; i < traced.length; i++) {
        if (i + 1 < traced.length) {
          line(traced[i][0], traced[i][1], traced[i + 1][0], traced[i + 1][1]);
        } else if (θ > τ) {
          line(traced[i][0], traced[i][1], traced[0][0], traced[0][1]);
        }
      }
    }
    scale(1 / width, -1 / height);
    translate(0, -height);
  }
}
